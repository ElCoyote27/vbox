diff --git a/ironic/drivers/modules/ssh.py b/ironic/drivers/modules/ssh.py
index 13c46b5..93f5751 100644
--- a/ironic/drivers/modules/ssh.py
+++ b/ironic/drivers/modules/ssh.py
@@ -35,4 +35,6 @@ from oslo_config import cfg
 from oslo_log import log as logging
 from oslo_utils import excutils
+from oslo_utils import strutils
+
 import retrying
 
@@ -85,5 +87,8 @@ OTHER_PROPERTIES = {
                       "private key. One of this, ssh_key_contents, or "
                       "ssh_key_filename must be specified."),
-    'ssh_port': _("port on the node to connect to; default is 22. Optional.")
+    'ssh_port': _("port on the node to connect to; default is 22. Optional."),
+    'vbox_use_headless': _("True or False (Default). Optional."
+                           "In the case of VirtualBox 3 and above, allows the"
+                           "user to use a headless remote VirtualBox machine.")
 }
 COMMON_PROPERTIES = REQUIRED_PROPERTIES.copy()
@@ -132,7 +137,18 @@ def _get_boot_device_map(virt_type):
 
 
-def _get_command_sets(virt_type):
+def _get_command_sets(virt_type, use_headless):
     """Retrieves the virt_type-specific commands to control power
 
+    use_headless is a boolean argument (defaults to false).
+    use_headless is used by some Hypervisors (only VBox v3.2 and above)
+    to determine if the hypervisor is being used on a headless box.
+    This is only relevant to Desktop Hypervisors that have different
+    CLI settings depending upon the availability of a graphical
+    environment working on the hypervisor itself. Again, only VBox
+    makes this distinction and allows "--type headless" to some of
+    its sub-commands. This is needed for support of tripleo with
+    VBox as the Hypervisor but some other Hypervisors could make
+    use of it in the future (Parallels, VMWare Workstation, etc...)
+
     Required commands are as follows:
 
@@ -148,7 +164,13 @@ def _get_command_sets(virt_type):
     """
     if virt_type == 'vbox':
+        vbox_headless_str = ''
+        if use_headless is True:
+            vbox_headless_str = '--type headless'
+        LOG.debug("VBox Headless flag for VM {_NodeName_} : %s (%s), ",
+                  use_headless,
+                  vbox_headless_str)
         return {
             'base_cmd': 'LC_ALL=C /usr/bin/VBoxManage',
-            'start_cmd': 'startvm {_NodeName_}',
+            'start_cmd': 'startvm {_NodeName_} %s' % vbox_headless_str,
             'stop_cmd': 'controlvm {_NodeName_} poweroff',
             'reboot_cmd': 'controlvm {_NodeName_} reset',
@@ -368,4 +390,6 @@ def _parse_driver_info(node):
     key_contents = info.get('ssh_key_contents')
     key_filename = info.get('ssh_key_filename')
+    use_headless = strutils.bool_from_string(info.get('vbox_use_headless',
+                                                      False))
     virt_type = info.get('ssh_virt_type')
     terminal_port = info.get('ssh_terminal_port')
@@ -380,4 +404,5 @@ def _parse_driver_info(node):
         'username': username,
         'port': port,
+        'use_headless': use_headless,
         'virt_type': virt_type,
         'uuid': node.uuid,
@@ -385,5 +410,5 @@ def _parse_driver_info(node):
     }
 
-    cmd_set = _get_command_sets(virt_type)
+    cmd_set = _get_command_sets(virt_type, use_headless)
     res['cmd_set'] = cmd_set
 
@@ -739,4 +764,17 @@ class SSHManagement(base.ManagementInterface):
         ssh_obj = _get_connection(node)
 
+        node_name = _get_hosts_name_for_node(ssh_obj, driver_info)
+        virt_type = driver_info['virt_type']
+        use_headless = driver_info['use_headless']
+
+        if virt_type == 'vbox':
+            if use_headless is True:
+                current_pstate = _get_power_status(ssh_obj, driver_info)
+                if current_pstate == states.POWER_ON:
+                    LOG.debug("Forcing VBox VM %s to power off "
+                              "in order to set the boot device.",
+                              node_name)
+                    _power_off(ssh_obj, driver_info)
+
         boot_device_map = _get_boot_device_map(driver_info['virt_type'])
         try:
